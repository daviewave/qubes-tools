#====* intro #====#
This is going to be an in depth walkthrough detailing exactly how the dns poisoning was occuring showing
	detailed evidence of each step in the process. Having just finally sorted out the major details of
	its functionality, it currently only explains how the nftable rules were overriding any local dns 
	settings i made by targeting network packets sent to a specific address on the dns port (53) and
	redirected them to its own malicious dns servers.

#=====================================#
#==* networking/firewalls in qubes *==#
#=====================================#
- this will go over how qubes os handles networking, explaining that when a request is made from a browser 
		on my downstream appvm, it is first sent to the sys-firewall virtual machine which is supposed to
		filter and forward to the sys-net virtual machine which is connected to the isp, sending the 
		request there. so this means the browser request made from my downstream virtual machine will be
		filtered through 2 layers of firewall rules.

- on linux operating systems, the service used to make firewall rules is called nftables (previously iptables)
		and allows the user to determine: a, what packets are allowed to pass through +	b, where the packets 
		will be directed to. This is configured by creating 'tables' that contain "set"s and "chains". a "set"
		allows the user to define groups of things that have similar behavior. a "chain" allows the user to
		specify what packets will hit the chain, the type of action to perform on the packet (routing, filtering, etc) 
		along with the conditions and/or instructions on how to handle the packets. every time i created and started 
		a new virtual machine with my qubes os, on both debian and fedora operating systems, i noticed there were 
		default pre-configured nftables rules being set. I would immediately run the command 'sudo nft list ruleset'
		which displays all current nftable rules, and in both sys-net and sys-firewall i would see 4 nft 'tables' 
		set: 'ip qubes', 'ip6 qubes','ip qubes-firewall' and 'ip6 qubes-firewall'. i captured this output and put
		it in the evidence/ folder, the 2 files are: 'default-sys-net-nftables' and 'default-sys-firewall-nftables'.
		i wanted to determine where these default rules were being configured on my virtual machines, so i searched
		the nftables documentation which said that any default rules to be applied upon system startup should be 
		set in the '/etc/nftables/main.nft' file. This location and file is provided by nftables, so i was stunned
		when i went opened the file and there were no rules defined. I also added screenshots of the location &
		directory structured and the contents of this in /evidence/nftables-documentation folder (it also contains
		referenes to the documentation nftables provides for this). At this point something seemed pretty off, so
		i began using commands to search for small strings that were in the rules being displayed from 'nft list rulset',
		for example the command 'grep -R "chain dnat-dns" /etc' would search every file in /etc and its subdirectories,
		and if the file contained the string "chain dnat-dns" it would display the file path of the matching file,
		which returned the file '/etc/dhclient.d/qubes-setup-dnat-to-ns.sh' -- i put this command output in 
		evidence/my-investigation/locating-roque-default-rules. i had found the file that was configuring these strange
		rules, and after going through its code it quickly became apparent that: 
      1) despite containing the '.sh' file extension that define shell scripts, it was contained python code
					and instructions to use a the '/usr/bin/python3' executable to run the code
			2) its file name did not indicate it was responsible for setting firewall rules upon system startup
			3) the code contained 3 functions -- the first 2 'get_dns_resolv_conf()' & 'get_dns_resolved()' contained logic
					that manipulated dns behavior, and the 3rd 'install_firewall_rules()' confirming this was my target

		(detailed forensic analysis next...)

#==============================================#	
#====* Malicious Script Forensic Analysis *====#
#==============================================#
although i originally sought to learn more about the firewall abnormal nftable firewall rules i discovered, the name of the script
and logic in the code showed that it had 2 major functionalities, to override the dns nameservers i had set locally and inject
its own, then use the injected dns namerservers to configure the firewall rule to always re-route the dns packets to its own
dns servers. So i split this section into parts:
		1) DNS Manipulation: explaining what dns is/how it works, why and how its a target for hackers, and finally go through the 
				dns manipulation code line by line explaining its behavior.

		2) Malicious Firewall Routing: explaining first how the script function install_firewall_rules() inserts the rules, then a detailed
				breakdown of the 4 malicious chains responsible for by-passing my settings and instead routing the traffic to 
				hidden, malicious dns servers

	#-------------------------------------#
	#-----   (1) dns manipulation  	------#
	#-------------------------------------#
	(1. briefly explain what dns servers are and what they do)			
	(2. how hackers target dns servers in attacks and what they end up getting as a result)
	(3. detailed forensics on how the code in the 2 functions related to the dns manipulation worked)


	#-------------------------------------#
	#-- (2) Malicious Firewall Routing  --#
	#-------------------------------------#	
	(1. breakdown of how the code in the firewall function sets the firewall rules)
	(2. detailed breakdown of the 4 chains maliciously re-routing packets to ignore my dns settings)


(2breaking down the 4 firewall chains responsible for the malicious routing) 
#- ip qubes -#
1, says that in order to be routed by this chain (type nat), which 
		is hit before routing, it must satisfy the following rules, 
		and otherwise continue to another routing chain
2, in order for the packet to be routed it must:
	a, be ipv4
	b, be being sent to the address 10.139.1.1 or 10.139.1.2
	c, on port 53 (dns)
3, if conditions are met, route the packet to 192.168.1.1
	


#- ip qubes-firewall -#
1, says to accept traffic coming from http or https
2, then accept all packets that satisfy the following:
	a, for all ipv4 packets
	b, going to 192.168.1.1 
	c, via tcp protocol
	d, on port 53 (dns port)
3, reject all pings
4, reject everything else with admin prohibited message



#== sys-firewall ==#
#- ip qubes chain dnat-dns -#
1, this is just saying if its sent on 10.139.1.1:53 or 10.139.1.2:53
			allow it to continue to where its going


#- ip qubes-firewall -#
1, chain will only accept packets that:
	a, are sent via http or https over tcp
	b, is an ipv4 packet
	c, is being sent to the ip address 10.139.1.1 or 10.139.1.2 on port 53
	d, is a ping

2, reject all other packets with admin prohibitied error















